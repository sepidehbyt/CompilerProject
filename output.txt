Int -> type yytext = Int 
IDtoken -> iddec yytext = f0rtiethNumber
iddec -> idlist yytext = ;
vardec -> type idlist SEMICOLON yytext = ;
vardec -> dec yytext = ;
declist -> dec yytext = ;
IDtoken -> funcValue yytext = f1bonachiSequence
Int -> type yytext = Int
IDtoken -> paramlist yytext = l1mit
paramdec -> type paramlist yytext = )
paramdec -> paramdecs yytext = )
Int -> type yytext = Int
IDtoken -> lvalue yytext = l1mit
lvalue -> exp yytext = l1mit
INTtoken -> exp yytext = #3
exp LT exp -> exp yytext = )
LEFTP exp RIGHTP -> exp yytext = )
INTtoken -> exp yytext = #1
Return exp -> stmt yytext = ;
stmt -> block yytext = ;
If exp Then block -> stmt yytext = ;
stmt -> stmtlist yytext = ;
IDtoken -> funcCallValue yytext = f1bonachi
INTtoken -> exp yytext = #1
exp -> explist yytext = ,
INTtoken -> exp yytext = #1
explist COMMA exp -> explist yytext = ,
IDtoken -> lvalue yytext = l1mit
lvalue -> exp yytext = l1mit
INTtoken -> exp yytext = #2
exp SUB exp -> exp yytext = )
explist COMMA exp -> explist yytext = )
funcCallValue LEFTP explist RIGHTP -> exp yytext = )
Return exp -> stmt yytext = End
stmtlist SEMICOLON stmt -> stmtlist yytext = End
Begin stmtlist End -> block yytext = End
Function funcValue LEFTP paramdecs RIGHTP COLON type block SEMICOLON ->  funcdec yytext = ;
funcdec -> dec yytext = ;
declist dec -> declist yytext = ;
IDtoken -> funcValue yytext = f1bonachi
Int -> type yytext = Int
IDtoken -> paramlist yytext = f1rst
paramlist COMMA IDtoken -> paramlist yytext = s3cond
paramlist COMMA IDtoken -> paramlist yytext = l1mit
paramdec -> type paramlist yytext = )
paramdec -> paramdecs yytext = )
Int -> type yytext = Int
IDtoken -> lvalue yytext = l1mit
IDtoken -> lvalue yytext = l1mit
lvalue -> exp yytext = l1mit
INTtoken -> exp yytext = #1
exp SUB exp -> exp yytext = ;
lvalue ASSIGNMENT exp -> stmt yytext = #1
stmt -> stmtlist yytext = ;
IDtoken -> lvalue yytext = l1mit
lvalue -> exp yytext = l1mit
INTtoken -> exp yytext = #0
exp EQ exp -> exp yytext = )
LEFTP exp RIGHTP -> exp yytext = )
IDtoken -> lvalue yytext = f1rst
lvalue -> exp yytext = f1rst
IDtoken -> lvalue yytext = s3cond
lvalue -> exp yytext = s3cond
exp ADD exp -> exp yytext = Else
Return exp -> stmt yytext = Else
stmt -> block yytext = Else
IDtoken -> funcCallValue yytext = f1bonachi
IDtoken -> lvalue yytext = s3cond
lvalue -> exp yytext = s3cond
exp -> explist yytext = ,
IDtoken -> lvalue yytext = f1rst
lvalue -> exp yytext = f1rst
IDtoken -> lvalue yytext = s3cond
lvalue -> exp yytext = s3cond
exp ADD exp -> exp yytext = ,
explist COMMA exp -> explist yytext = ,
IDtoken -> lvalue yytext = l1mit
lvalue -> exp yytext = l1mit
explist COMMA exp -> explist yytext = )
funcCallValue LEFTP explist RIGHTP -> exp yytext = )
Return exp -> stmt yytext = End
stmt -> block yytext = End
If exp Then block Else block -> stmt yytext = End
stmtlist SEMICOLON stmt -> stmtlist yytext = End
Begin stmtlist End -> block yytext = End
Function funcValue LEFTP paramdecs RIGHTP COLON type block SEMICOLON ->  funcdec yytext = ;
funcdec -> dec yytext = ;
declist dec -> declist yytext = ;
IDtoken -> lvalue yytext = f0rtiethNumber
IDtoken -> funcCallValue yytext = f1bonachiSequence
INTtoken -> exp yytext = #40
exp -> explist yytext = )
funcCallValue LEFTP explist RIGHTP -> exp yytext = )
lvalue ASSIGNMENT exp -> stmt yytext = #40
stmt -> stmtlist yytext = End
Begin stmtlist End -> block yytext = End
Program IDtoken SEMICOLON declist block SEMICOLON -> program yytext = ;
