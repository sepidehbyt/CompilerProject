Int -> type yytext = Int 
IDtoken -> iddec yytext = n4mber
iddec -> idlist yytext = ;
vardec -> type idlist SEMICOLON yytext = ;
vardec -> dec yytext = ;
declist -> dec yytext = ;
IDtoken -> funcValue yytext = f4ctorial
Int -> type yytext = Int
IDtoken -> paramlist yytext = n4mber
paramdec -> type paramlist yytext = )
paramdec -> paramdecs yytext = )
Int -> type yytext = Int
IDtoken -> lvalue yytext = n4mber
lvalue -> exp yytext = .LT.
INTtoken -> exp yytext = #2
exp LT exp -> exp yytext = )
LEFTP exp RIGHTP -> exp yytext = )
INTtoken -> exp yytext = #1
Return exp -> stmt yytext = ;
stmt -> block yytext = ;
If exp Then block -> stmt yytext = ;
stmt -> stmtlist yytext = ;
IDtoken -> lvalue yytext = n4mber
lvalue -> exp yytext = *
IDtoken -> funcCallValue yytext = f4ctorial
IDtoken -> lvalue yytext = n4mber
lvalue -> exp yytext = -
INTtoken -> exp yytext = #1
exp SUB exp -> exp yytext = )
exp -> explist yytext = )
funcCallValue LEFTP explist RIGHTP -> exp yytext = )
exp MUL exp -> exp yytext = )
Return exp -> stmt yytext = End
stmtlist SEMICOLON stmt -> stmtlist yytext = End
Begin stmtlist End -> block yytext = End
Function funcValue LEFTP paramdecs RIGHTP COLON type block SEMICOLON ->  funcdec yytext = ;
funcdec -> dec yytext = ;
declist dec -> declist yytext = ;
IDtoken -> lvalue yytext = n4mber
IDtoken -> funcCallValue yytext = f4ctorial
INTtoken -> exp yytext = #5
exp -> explist yytext = )
funcCallValue LEFTP explist RIGHTP -> exp yytext = )
IDtoken ASSIGNMENT exp -> stmt yytext = #5
stmt -> stmtlist yytext = End
Begin stmtlist End -> block yytext = End
Program IDtoken SEMICOLON declist block SEMICOLON -> program yytext = ;
